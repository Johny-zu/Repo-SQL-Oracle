CONN SYSTEM/<PASSWORD>;
CON HR/HR;

-- POR SI ACASO
SET SERVEROUTPUT ON;

-- En este haremos trigger 
-- EJEMPLO DE UN TRIGGER USANDO TABLAS PASADAS
CREATE OR REPLACE TRIGGER TR_PRODUCTOS
AFTER INSERT ON PROVEDOR
FOR EACH ROW
BEGIN
INSERT INTO PRODCTORA VALUES(5, NEW.RFC, 'TRIGGER2', 20, 1);
END;
/

-- TRIGGER 1
CREATE OR REPLACE TRIGGER t
    BEFORE
        INSERT OR
        UPDATE OF SALARY, DEPARTMENT_ID OR
        DELETE
    ON EMPLOYEES
BEGIN 
    CASE
        WHEN INSERTING THEN
            DBMS_OUTPUT.PUT_LINE('INSERTING');
        WHEN UPDATING('SALARY') THEN
            DBMS_OUTPUT.PUT_LINE('UPDATING SALARY');
        WHEN UPDATING('DEPARTMENT_ID') THEN
            DBMS_OUTPUT.PUT_LINE('UPDATING DEPARTMENT ID');
        WHEN DELETING THEN
            DBMS_OUTPUT.PUT_LINE('DELETING');
    END CASE;
END;
/

UPDATE EMPLOYEES SET SALARY = 5000 WHERE EMPLOYEE_ID = 200;

-- TRIGGER 2
CREATE OR REPLACE TRIGGER PRINT_SALARY_CHANGES
    BEFORE DELETE OR INSERT OR UPDATE ON EMPLOYEES
    FOR EACH ROW
    WHEN (NEW.JOB_ID <> 'AD_PRES')
DECLARE
    SAL_DIFF NUMBER;
BEGIN
    SAL_DIFF := :NEW.SALARY - :OLD.SALARY;
    DBMS_OUTPUT.PUT_LINE(:NEW.LAST_NAME || ': ');
    DBMS_OUTPUT.PUT_LINE('OLD SALARY = ' || :OLD.SALARY || ', ');
    DBMS_OUTPUT.PUT_LINE('NEW SALARY = ' || :NEW.SALARY || ', ');
    DBMS_OUTPUT.PUT_LINE('DIFFERENCE: ' || SAL_DIFF);
END;
/


UPDATE EMPLOYEES SET SALARY = 100000 
WHERE EMPLOYEE_ID = 200;

-- seQuence 
CREATE SEQUENCE SEQ_REGION_ID --objeto de secuencia 
START WITH 7 -- parametro que define el valor inicial
INCREMENT BY 1 
NOCACHE -- No almacenara cache los valores generados de la secuencia 
NOCYCLE; --no se reciclara una vez alcance el valor maximo

-- Forma de poner en practica la secuencia 
SELECT SEQ_REGION_ID.NEXTVAL FROM DUAL;

-- TRIGGER 3
CREATE OR REPLACE TRIGGER tr_regions
    BEFORE INSERT ON REGIONS2
    FOR EACH ROW
BEGIN
    IF :NEW.REGION2_ID IS NULL THEN
        SELECT SEQ_REGION_ID. NEXTVAL INTO :NEW.REGION2_ID FROM DUAL;
    END IF;
END;
/

a